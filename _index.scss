////
/// Tom's Simple Grid
/// 
/// @author Tom Slominski
////

@use 'toms-sass-helpers' as *;
@use 'sass:map';

/// List of grid sizes to generate for each breakpoint.
/// `*` is for generating classes with no breakpoint.
///
/// @type map
/// @prop {string} Key - Breakpoint name from toms-sass-helpers package.
/// @prop {list} Value - A list of grid widths to generate for this breakpoint.
$grid-sizes: (
	"*": (1, 2, 3, 4, 12),
	"sm": (1, 2, 3, 4, 12),
	"md": (1, 2, 3, 4, 12),
	"lg": (1, 2, 3, 4, 12),
	"xl": (1, 2, 3, 4, 12),
	"xxl": (1, 2, 3, 4, 12),
	"xxxl": (1, 2, 3, 4, 12)
) !default;

/// Maximum allowed grid width.
///
/// @type number
$grid-width: 1200px !default;

/// Default gutter width.
///
/// @type number
$default-gutter: 20px !default;

/// Small gutter width.
///
/// @type number
$gutter-small: $default-gutter * 0.5 !default;

/// Large gutter width.
///
/// @type number
$gutter-large: $default-gutter * 2 !default;

/// Class prefix.
///
/// @type string
$class-prefix: "t-" !default;

/// Wrap the content in breakpoint, if necessary
///
/// @param {string} $bp Breakpoint name from toms-sass-helpers package.
@mixin grid-bp( $bp ) {
	@if "*" == $bp {
		@content
	} @else {
		@include bp( $bp ) {
			@content;
		}
	}
}

/// Generate class name for a specific grid width.
///
/// @param {string} $name Name of the breakpoint.
/// @param {int} $current Currently iterated over width.
/// @param {int} $total Total available widths number.
/// @return {string} CSS class name.
@function grid-class-name( $name, $current, $total ) {
	@if "*" == $name {
		@return ".#{$class-prefix}width-#{$current}-#{$total}";
	} @else {
		@return ".#{$class-prefix}width-#{$name}-#{$current}-#{$total}";
	}
}

.#{$class-prefix}container {
	width: 100%;
	max-width: $grid-width;
	margin-left: auto;
	margin-right: auto;
	padding-left: $default-gutter;
	padding-right: $default-gutter;
	box-sizing: border-box;
	
	&.#{$class-prefix}container-large {
		max-width: $grid-width * 1.5;
	}
	
	&.#{$class-prefix}container-full-width {
		max-width: 100%;
	}
	
	&.#{$class-prefix}gutter-small {
		> .#{$class-prefix}row {
			margin-left: $gutter-small * -1;
			
			> * {
				padding-left: $gutter-small;
			}
		}
	}
	
	&.#{$class-prefix}gutter-large {
		> .#{$class-prefix}row {
			margin-left: $gutter-large * -1;
			
			> * {
				padding-left: $gutter-large;
			}
		}
	}
}

.#{$class-prefix}row {
	display: flex;
	flex-wrap: wrap;
	margin-left: $default-gutter * -1;
	box-sizing: border-box;
	
	&.#{$class-prefix}gutter-small {
		margin-left: $gutter-small * -1;
		
		> * {
			padding-left: $gutter-small;
		}
	}
	
	&.#{$class-prefix}gutter-large {
		margin-left: $gutter-large * -1;
		
		> * {
			padding-left: $gutter-large;
		}
	}
	
	&.#{$class-prefix}vertical-start {
		align-items: start;
	}
	
	&.#{$class-prefix}vertical-center {
		align-items: center;
	}
	
	&.#{$class-prefix}vertical-end {
		align-items: end;
	}
	
	&.#{$class-prefix}horizontal-start {
		justify-content: start;
	}
	
	&.#{$class-prefix}horizontal-center {
		justify-content: center;
	}
	
	&.#{$class-prefix}horizontal-end {
		justify-content: center;
	}
	
	& > * {
		padding-left: $default-gutter; // Does this need to be the same as the gutter?
		box-sizing: border-box;
	}
}

@each $name, $sizes in $grid-sizes {
	@include grid-bp( $name ) {
		@each $size in $sizes {
			@for $i from 1 through $size {
				$class-name: grid-class-name( $name, $i, $size );
				
				#{$class-name} {
					width: $i / $size * 100%;
				}
			}
		}
	}
}

.#{$class-prefix}height-1-1 {
	height: 100%;
}
